#include "Elliptic_Curve.h"
#include <PKA/PKAs.h>


using namespace NTL;
using namespace OpenPGP;

namespace peaks{
namespace analyzer{
Elliptic_Curve::Elliptic_Curve(const std::string &OID) : Curve(OID){
    if (OID == PKA::CURVE_OID::NIST_256){
        p = conv<ZZ>("115792089210356248762697446949407573530086143415290314195533631308867097853951");
        ZZ_p::init(p);
        order = conv<ZZ>("115792089210356248762697446949407573529996955224135760342422259061068512044369");
        a = ZZ_p(-3);
        b = conv<ZZ_p>("41058363725152142129326129780047268409114441015993725554835256314039467401291");
        G = std::make_pair(conv<ZZ_p>("48439561293906451759052585252797914202762949526041747995844080717082404635286"),
                           conv<ZZ_p>("36134250956749795798585127919587881956611106672985015071877198253568414405109"));
    } else if (OID == PKA::CURVE_OID::NIST_384){
        p = conv<ZZ>("39402006196394479212279040100143613805079739270465446667948293404245721771496870329047266088258938001861606973112319");
        ZZ_p::init(p);
        order = conv<ZZ>("39402006196394479212279040100143613805079739270465446667946905279627659399113263569398956308152294913554433653942643");
        a = ZZ_p(-3);
        b = conv<ZZ_p>("27580193559959705877849011840389048093056905856361568521428707301988689241309860865136260764883745107765439761230575");
        G = std::make_pair(conv<ZZ_p>("26247035095799689268623156744566981891852923491109213387815615900925518854738050089022388053975719786650872476732087"),
                           conv<ZZ_p>("8325710961489029985546751289520108179287853048861315594709205902480503199884419224438643760392947333078086511627871"));
    } else if (OID == PKA::CURVE_OID::NIST_521){
        p = conv<ZZ>("6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057151");
        ZZ_p::init(p);
        order = conv<ZZ>("6864797660130609714981900799081393217269435300143305409394463459185543183397655394245057746333217197532963996371363321113864768612440380340372808892707005449");
        a = ZZ_p(-3);
        b = conv<ZZ_p>("1093849038073734274511112390766805569936207598951683748994586394495953116150735016013708737573759623248592132296706313309438452531591012912142327488478985984");
        G = std::make_pair(conv<ZZ_p>("2661740802050217063228768716723360960729859168756973147706671368418802944996427808491545080627771902352094241225065558662157113545570916814161637315895999846"),
                           conv<ZZ_p>("3757180025770020463545507224491183603594455134769762486694567779615544477440556316691234405012945539562144444537289428522585666729196580810124344277578376784"));
    } else if (OID == PKA::CURVE_OID::BRAINPOOL_256){
        p = conv<ZZ>("76884956397045344220809746629001649093037950200943055203735601445031516197751");
        ZZ_p::init(p);
        order = conv<ZZ>("76884956397045344220809746629001649092737531784414529538755519063063536359079");
        a = conv<ZZ_p>("56698187605326110043627228396178346077120614539475214109386828188763884139993");
        b = conv<ZZ_p>("17577232497321838841075697789794520262950426058923084567046852300633325438902");
        G = std::make_pair(conv<ZZ_p>("63243729749562333355292243550312970334778175571054726587095381623627144114786"),
                           conv<ZZ_p>("38218615093753523893122277964030810387585405539772602581557831887485717997975"));
    } else if (OID == PKA::CURVE_OID::BRAINPOOL_512){
        p = conv<ZZ>("8948962207650232551656602815159153422162609644098354511344597187200057010413552439917934304191956942765446530386427345937963894309923928536070534607816947");
        ZZ_p::init(p);
        order = conv<ZZ>("8948962207650232551656602815159153422162609644098354511344597187200057010413418528378981730643524959857451398370029280583094215613882043973354392115544169");
        a = conv<ZZ_p>("6294860557973063227666421306476379324074715770622746227136910445450301914281276098027990968407983962691151853678563877834221834027439718238065725844264138");
        b = conv<ZZ_p>("3245789008328967059274849584342077916531909009637501918328323668736179176583263496463525128488282611559800773506973771797764811498834995234341530862286627");
        G = std::make_pair(conv<ZZ_p>("6792059140424575174435640431269195087843153390102521881468023012732047482579853077545647446272866794936371522410774532686582484617946013928874296844351522"),
                           conv<ZZ_p>("6592244555240112873324748381429610341312712940326266331327445066687010545415256461097707483288650216992613090185042957716318301180159234788504307628509330"));
    }else{
        throw std::runtime_error("Curve not recognized");
    }
}

const ZZ &Elliptic_Curve::getP() const {
    return p;
}

const ZZ &Elliptic_Curve::getOrder() const {
    return order;
}

const ZZ_p &Elliptic_Curve::getA() const {
    return a;
}

const std::pair<ZZ_p, ZZ_p> &Elliptic_Curve::getG() const {
    return G;
}

const ZZ_p &Elliptic_Curve::getB() const {
    return b;
}

std::ostream &operator<<(std::ostream &os, const Elliptic_Curve &curve) {
    os << "OID: " << curve.OID << " p: " << curve.p << " order: " << curve.order << " a: " << curve.a << " b: "
       << curve.b << " Gx: " << curve.G.first << " Gy: " << curve.G.second;
    return os;
}
/*
ZZ_p Elliptic_Curve::getX(const ZZ_p &y){
    return power(y, 2) - Elliptic_Curve::a * y - Elliptic_Curve::b;
}

ZZ_p Elliptic_Curve::getY(const ZZ_p &x){
    return SqrRoot(power(x, 3) + Elliptic_Curve::a * x + Elliptic_Curve::b);
}*/

}
}
