-- MySQL Script generated by MySQL Workbench
-- ven 19 ott 2018 21:55:11 CEST
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema gpg_keyserver
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema gpg_keyserver
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `gpg_keyserver` DEFAULT CHARACTER SET utf8 ;
USE `gpg_keyserver` ;

-- -----------------------------------------------------
-- Table `gpg_keyserver`.`KeyStatus`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gpg_keyserver`.`KeyStatus` (
  `version` TINYINT(3) UNSIGNED NOT NULL,
  `fingerprint` BINARY(20) NOT NULL,
  `vulnerabilityCode` TINYINT(4) NOT NULL,
  `vulnerabilityDescription` VARCHAR(250) COLLATE 'utf8mb4_unicode_ci' NULL DEFAULT NULL,
  PRIMARY KEY (`version`, `fingerprint`, `vulnerabilityCode`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `gpg_keyserver`.`Pubkey`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gpg_keyserver`.`Pubkey` (
  `keyId` BIGINT(20) UNSIGNED NOT NULL,
  `version` TINYINT(3) UNSIGNED NOT NULL,
  `fingerprint` BINARY(20) NOT NULL,
  `PriFingerprint` BINARY(20) NULL DEFAULT NULL,
  `pubAlgorithm` SMALLINT(5) UNSIGNED NOT NULL,
  `creationTime` DATETIME NOT NULL,
  `expirationTime` DATETIME NULL DEFAULT NULL,
  `revocationTime` DATETIME NULL DEFAULT NULL,
  `e` BLOB NULL DEFAULT NULL,
  `n` BLOB NULL DEFAULT NULL,
  `p` BLOB NULL DEFAULT NULL,
  `q` BLOB NULL DEFAULT NULL,
  `g` BLOB NULL DEFAULT NULL,
  `y` BLOB NULL DEFAULT NULL,
  `curveOID` TEXT COLLATE 'utf8mb4_unicode_ci' NOT NULL,
  `is_analyzed` TINYINT(4) NOT NULL DEFAULT '0',
  `sccIndex` INT(10) UNSIGNED NULL DEFAULT NULL,
  PRIMARY KEY (`version`, `fingerprint`),
  INDEX `n` (`n`(200) ASC),
  INDEX `p` (`p`(200) ASC),
  INDEX `q` (`q`(200) ASC),
  INDEX `y` (`y`(200) ASC),
  INDEX `sccIndex` (`sccIndex` ASC),
  INDEX `keyId` USING BTREE (`keyId` ASC, `fingerprint` ASC),
  INDEX `fingerprint` (`fingerprint` ASC),
  INDEX `Pubkey_cert` (`version` ASC, `PriFingerprint` ASC),
  INDEX `is_analyzed` (`is_analyzed` ASC),
  INDEX `is_analyzed_2` (`is_analyzed` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `gpg_keyserver`.`SignatureStatus`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gpg_keyserver`.`SignatureStatus` (
  `signature_id` INT(10) UNSIGNED NOT NULL,
  `vulnerabilityCode` TINYINT(4) NOT NULL,
  `vulnerabilityDescription` VARCHAR(250) COLLATE 'utf8mb4_unicode_ci' NULL DEFAULT NULL,
  PRIMARY KEY (`signature_id`, `vulnerabilityCode`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `gpg_keyserver`.`Unpacker_errors`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gpg_keyserver`.`Unpacker_errors` (
  `idx` INT(11) NOT NULL AUTO_INCREMENT,
  `version` TINYINT(3) UNSIGNED NOT NULL,
  `fingerprint` BINARY(20) NOT NULL,
  `error` TEXT COLLATE 'utf8mb4_unicode_ci' NOT NULL,
  PRIMARY KEY (`idx`),
  INDEX `external key` USING BTREE (`version` ASC, `fingerprint` ASC))
ENGINE = InnoDB
AUTO_INCREMENT = 327309;


-- -----------------------------------------------------
-- Table `gpg_keyserver`.`UserAttribute`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gpg_keyserver`.`UserAttribute` (
  `id` INT(11) NOT NULL,
  `fingerprint` BINARY(20) NOT NULL,
  `name` VARCHAR(750) CHARACTER SET 'utf8' NOT NULL,
  `encoding` INT(11) NULL DEFAULT NULL,
  `image` LONGBLOB NULL DEFAULT NULL,
  PRIMARY KEY (`id`, `fingerprint`, `name`(200)),
  UNIQUE INDEX `fingerprint` USING BTREE (`fingerprint`(10) ASC, `name`(200) ASC, `image`(60) ASC),
  INDEX `userID` (`fingerprint` ASC, `name`(200) ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `gpg_keyserver`.`broken_keys`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gpg_keyserver`.`broken_keys` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `certificate` LONGBLOB NULL DEFAULT NULL,
  `log` VARCHAR(500) COLLATE 'utf8mb4_unicode_ci' NULL DEFAULT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
AUTO_INCREMENT = 11366;


-- -----------------------------------------------------
-- Table `gpg_keyserver`.`gpg_keyserver`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gpg_keyserver`.`gpg_keyserver` (
  `version` TINYINT(3) UNSIGNED NOT NULL,
  `ID` BIGINT(20) UNSIGNED NOT NULL,
  `fingerprint` BINARY(20) NOT NULL,
  `certificate` LONGBLOB NULL DEFAULT NULL,
  `hash` VARCHAR(128) COLLATE 'utf8mb4_unicode_ci' NOT NULL,
  `is_unpacked` TINYINT(4) NOT NULL DEFAULT '0',
  `is_synchronized` TINYINT(4) NOT NULL DEFAULT '0',
  `error_code` INT(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`version`, `fingerprint`),
  INDEX `ID` USING BTREE (`ID` ASC, `fingerprint` ASC),
  INDEX `HASH` (`hash` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `gpg_keyserver`.`removed_hash`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gpg_keyserver`.`removed_hash` (
  `hash` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`hash`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `gpg_keyserver`.`revocationSignatures`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gpg_keyserver`.`revocationSignatures` (
  `issuingKeyId` BIGINT(20) UNSIGNED NOT NULL DEFAULT '0',
  `signedFingerprint` BINARY(20) NOT NULL DEFAULT ',
  `signedUsername` VARCHAR(750) NOT NULL DEFAULT '',
  PRIMARY KEY (`issuingKeyId`, `signedFingerprint`, `signedUsername`(250)))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `gpg_keyserver`.`selfSignaturesMetadata`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gpg_keyserver`.`selfSignaturesMetadata` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `type` SMALLINT(5) UNSIGNED NOT NULL,
  `pubAlgorithm` SMALLINT(5) UNSIGNED NOT NULL,
  `hashAlgorithm` SMALLINT(5) UNSIGNED NOT NULL,
  `version` SMALLINT(5) UNSIGNED NOT NULL,
  `issuingKeyId` BIGINT(20) UNSIGNED NOT NULL,
  `issuingFingerprint` BINARY(20) NOT NULL,
  `preferedHash` BLOB NULL DEFAULT NULL,
  `preferedCompression` BLOB NULL DEFAULT NULL,
  `preferedSymmetric` BLOB NULL DEFAULT NULL,
  `trustLevel` SMALLINT(5) UNSIGNED NULL DEFAULT NULL,
  `keyExpirationTime` DATETIME NULL DEFAULT NULL,
  `isPrimaryUserId` TINYINT(1) NOT NULL,
  `signedUserId` VARCHAR(750) CHARACTER SET 'utf8' NULL DEFAULT NULL,
  `userRole` VARCHAR(40) COLLATE 'utf8mb4_unicode_ci' NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `type` (`type` ASC),
  INDEX `hashAlgorithm` (`hashAlgorithm` ASC),
  INDEX `issuingKey` USING BTREE (`issuingKeyId` ASC, `issuingFingerprint` ASC),
  INDEX `issuingFingerprint` (`issuingFingerprint` ASC, `signedUserId`(255) ASC),
  INDEX `signedUserId` (`signedUserId`(255) ASC),
  INDEX `version` (`version` ASC, `issuingFingerprint` ASC, `trustLevel` ASC, `isPrimaryUserId` ASC))
ENGINE = InnoDB
AUTO_INCREMENT = 10701766;


-- -----------------------------------------------------
-- Table `gpg_keyserver`.`ptree`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gpg_keyserver`.`ptree` (
  `node_key` VARCHAR(250) NOT NULL,
  `node_svalues` BLOB NOT NULL,
  `num_elements` INT NOT NULL,
  `leaf` TINYINT(1) NOT NULL,
  `node_elements` BLOB NOT NULL,
  PRIMARY KEY (`node_key`))
ENGINE = InnoDB;

USE `gpg_keyserver` ;

-- -----------------------------------------------------
-- Placeholder table for view `gpg_keyserver`.`key_primary_userID`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gpg_keyserver`.`key_primary_userID` (`id` INT);

-- -----------------------------------------------------
-- Placeholder table for view `gpg_keyserver`.`Signature_no_issuing_fp`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gpg_keyserver`.`Signature_no_issuing_fp` (`id` INT);

-- -----------------------------------------------------
-- Placeholder table for view `gpg_keyserver`.`emailDomain`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gpg_keyserver`.`emailDomain` (`domain` INT, `fingerprint` INT);

-- -----------------------------------------------------
-- View `gpg_keyserver`.`key_primary_userID`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gpg_keyserver`.`key_primary_userID`;
USE `gpg_keyserver`;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `key_primary_userID` AS (select `selfSignaturesMetadata`.`version` AS `version`,`selfSignaturesMetadata`.`issuingFingerprint` AS `fingerprint`,`selfSignaturesMetadata`.`signedUserId` AS `name`,`selfSignaturesMetadata`.`isPrimaryUserId` AS `isPrimaryUserId`,`selfSignaturesMetadata`.`trustLevel` AS `trustLevel` from `selfSignaturesMetadata` group by `selfSignaturesMetadata`.`version`,`selfSignaturesMetadata`.`issuingFingerprint` order by `selfSignaturesMetadata`.`isPrimaryUserId` desc,`selfSignaturesMetadata`.`trustLevel` desc) */;

-- -----------------------------------------------------
-- View `gpg_keyserver`.`Signature_no_issuing_fp`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gpg_keyserver`.`Signature_no_issuing_fp`;
USE `gpg_keyserver`;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `Signature_no_issuing_fp` AS (select `Signatures`.`id` AS `id`,`Pubkey`.`fingerprint` AS `fp` from (`Signatures` join `Pubkey` on((`Signatures`.`issuingKeyId` = `Pubkey`.`keyId`))) where isnull(`Signatures`.`issuingFingerprint`)) */;

-- -----------------------------------------------------
-- View `gpg_keyserver`.`emailDomain`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gpg_keyserver`.`emailDomain`;
USE `gpg_keyserver`;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`gpg_keyserver`@`%` SQL SECURITY DEFINER */
/*!50001 VIEW `emailDomain` AS select substr(from_base64(`UserID`.`email`),(locate('@',from_base64(`UserID`.`email`)) + 1),((char_length(from_base64(`UserID`.`email`)) - locate('>',reverse(from_base64(`UserID`.`email`)))) - locate('>',from_base64(`UserID`.`email`)))) AS `domain`,`UserID`.`fingerprint` AS `fingerprint` from `UserID` where (`UserID`.`email` <> '') */;
USE `gpg_keyserver`;

DELIMITER $$
USE `gpg_keyserver`$$
/*!50003 CREATE*/ /*!50017 DEFINER=`gpg_keyserver`@`%`*/ /*!50003 TRIGGER `save_hash` AFTER UPDATE ON `gpg_keyserver` FOR EACH ROW IF (OLD.is_synchronized = 1 and OLD.hash != NEW.hash) THEN
            INSERT IGNORE INTO removed_hash VALUES(OLD.hash);
      END IF */$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
